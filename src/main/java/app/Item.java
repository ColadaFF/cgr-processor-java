/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package app;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Item extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -9062191159131313468L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Item\",\"namespace\":\"com.solucionescgr.lyra.avro\",\"fields\":[{\"name\":\"personId\",\"type\":\"string\"},{\"name\":\"itemId\",\"type\":\"string\"},{\"name\":\"itemType\",\"type\":\"string\"},{\"name\":\"itemSubType\",\"type\":\"string\"},{\"name\":\"valueText\",\"type\":[\"string\",\"null\"]},{\"name\":\"valueNumber\",\"type\":[\"int\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Item> ENCODER =
      new BinaryMessageEncoder<Item>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Item> DECODER =
      new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Item> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Item> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Item> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Item>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Item to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Item from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Item instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Item fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private CharSequence personId;
   private CharSequence itemId;
   private CharSequence itemType;
   private CharSequence itemSubType;
   private CharSequence valueText;
   private Integer valueNumber;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Item() {}

  /**
   * All-args constructor.
   * @param personId The new value for personId
   * @param itemId The new value for itemId
   * @param itemType The new value for itemType
   * @param itemSubType The new value for itemSubType
   * @param valueText The new value for valueText
   * @param valueNumber The new value for valueNumber
   */
  public Item(CharSequence personId, CharSequence itemId, CharSequence itemType, CharSequence itemSubType, CharSequence valueText, Integer valueNumber) {
    this.personId = personId;
    this.itemId = itemId;
    this.itemType = itemType;
    this.itemSubType = itemSubType;
    this.valueText = valueText;
    this.valueNumber = valueNumber;
  }

  public SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return personId;
    case 1: return itemId;
    case 2: return itemType;
    case 3: return itemSubType;
    case 4: return valueText;
    case 5: return valueNumber;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: personId = (CharSequence)value$; break;
    case 1: itemId = (CharSequence)value$; break;
    case 2: itemType = (CharSequence)value$; break;
    case 3: itemSubType = (CharSequence)value$; break;
    case 4: valueText = (CharSequence)value$; break;
    case 5: valueNumber = (Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'personId' field.
   * @return The value of the 'personId' field.
   */
  public CharSequence getPersonId() {
    return personId;
  }


  /**
   * Sets the value of the 'personId' field.
   * @param value the value to set.
   */
  public void setPersonId(CharSequence value) {
    this.personId = value;
  }

  /**
   * Gets the value of the 'itemId' field.
   * @return The value of the 'itemId' field.
   */
  public CharSequence getItemId() {
    return itemId;
  }


  /**
   * Sets the value of the 'itemId' field.
   * @param value the value to set.
   */
  public void setItemId(CharSequence value) {
    this.itemId = value;
  }

  /**
   * Gets the value of the 'itemType' field.
   * @return The value of the 'itemType' field.
   */
  public CharSequence getItemType() {
    return itemType;
  }


  /**
   * Sets the value of the 'itemType' field.
   * @param value the value to set.
   */
  public void setItemType(CharSequence value) {
    this.itemType = value;
  }

  /**
   * Gets the value of the 'itemSubType' field.
   * @return The value of the 'itemSubType' field.
   */
  public CharSequence getItemSubType() {
    return itemSubType;
  }


  /**
   * Sets the value of the 'itemSubType' field.
   * @param value the value to set.
   */
  public void setItemSubType(CharSequence value) {
    this.itemSubType = value;
  }

  /**
   * Gets the value of the 'valueText' field.
   * @return The value of the 'valueText' field.
   */
  public CharSequence getValueText() {
    return valueText;
  }


  /**
   * Sets the value of the 'valueText' field.
   * @param value the value to set.
   */
  public void setValueText(CharSequence value) {
    this.valueText = value;
  }

  /**
   * Gets the value of the 'valueNumber' field.
   * @return The value of the 'valueNumber' field.
   */
  public Integer getValueNumber() {
    return valueNumber;
  }


  /**
   * Sets the value of the 'valueNumber' field.
   * @param value the value to set.
   */
  public void setValueNumber(Integer value) {
    this.valueNumber = value;
  }

  /**
   * Creates a new Item RecordBuilder.
   * @return A new Item RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Item RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Item RecordBuilder by copying an existing Item instance.
   * @param other The existing instance to copy.
   * @return A new Item RecordBuilder
   */
  public static Builder newBuilder(Item other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Item instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Item>
    implements org.apache.avro.data.RecordBuilder<Item> {

    private CharSequence personId;
    private CharSequence itemId;
    private CharSequence itemType;
    private CharSequence itemSubType;
    private CharSequence valueText;
    private Integer valueNumber;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.personId)) {
        this.personId = data().deepCopy(fields()[0].schema(), other.personId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.itemId)) {
        this.itemId = data().deepCopy(fields()[1].schema(), other.itemId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.itemType)) {
        this.itemType = data().deepCopy(fields()[2].schema(), other.itemType);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.itemSubType)) {
        this.itemSubType = data().deepCopy(fields()[3].schema(), other.itemSubType);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.valueText)) {
        this.valueText = data().deepCopy(fields()[4].schema(), other.valueText);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.valueNumber)) {
        this.valueNumber = data().deepCopy(fields()[5].schema(), other.valueNumber);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing Item instance
     * @param other The existing instance to copy.
     */
    private Builder(Item other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.personId)) {
        this.personId = data().deepCopy(fields()[0].schema(), other.personId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.itemId)) {
        this.itemId = data().deepCopy(fields()[1].schema(), other.itemId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.itemType)) {
        this.itemType = data().deepCopy(fields()[2].schema(), other.itemType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.itemSubType)) {
        this.itemSubType = data().deepCopy(fields()[3].schema(), other.itemSubType);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.valueText)) {
        this.valueText = data().deepCopy(fields()[4].schema(), other.valueText);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.valueNumber)) {
        this.valueNumber = data().deepCopy(fields()[5].schema(), other.valueNumber);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'personId' field.
      * @return The value.
      */
    public CharSequence getPersonId() {
      return personId;
    }


    /**
      * Sets the value of the 'personId' field.
      * @param value The value of 'personId'.
      * @return This builder.
      */
    public Builder setPersonId(CharSequence value) {
      validate(fields()[0], value);
      this.personId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'personId' field has been set.
      * @return True if the 'personId' field has been set, false otherwise.
      */
    public boolean hasPersonId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'personId' field.
      * @return This builder.
      */
    public Builder clearPersonId() {
      personId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemId' field.
      * @return The value.
      */
    public CharSequence getItemId() {
      return itemId;
    }


    /**
      * Sets the value of the 'itemId' field.
      * @param value The value of 'itemId'.
      * @return This builder.
      */
    public Builder setItemId(CharSequence value) {
      validate(fields()[1], value);
      this.itemId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'itemId' field has been set.
      * @return True if the 'itemId' field has been set, false otherwise.
      */
    public boolean hasItemId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'itemId' field.
      * @return This builder.
      */
    public Builder clearItemId() {
      itemId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemType' field.
      * @return The value.
      */
    public CharSequence getItemType() {
      return itemType;
    }


    /**
      * Sets the value of the 'itemType' field.
      * @param value The value of 'itemType'.
      * @return This builder.
      */
    public Builder setItemType(CharSequence value) {
      validate(fields()[2], value);
      this.itemType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'itemType' field has been set.
      * @return True if the 'itemType' field has been set, false otherwise.
      */
    public boolean hasItemType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'itemType' field.
      * @return This builder.
      */
    public Builder clearItemType() {
      itemType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'itemSubType' field.
      * @return The value.
      */
    public CharSequence getItemSubType() {
      return itemSubType;
    }


    /**
      * Sets the value of the 'itemSubType' field.
      * @param value The value of 'itemSubType'.
      * @return This builder.
      */
    public Builder setItemSubType(CharSequence value) {
      validate(fields()[3], value);
      this.itemSubType = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'itemSubType' field has been set.
      * @return True if the 'itemSubType' field has been set, false otherwise.
      */
    public boolean hasItemSubType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'itemSubType' field.
      * @return This builder.
      */
    public Builder clearItemSubType() {
      itemSubType = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueText' field.
      * @return The value.
      */
    public CharSequence getValueText() {
      return valueText;
    }


    /**
      * Sets the value of the 'valueText' field.
      * @param value The value of 'valueText'.
      * @return This builder.
      */
    public Builder setValueText(CharSequence value) {
      validate(fields()[4], value);
      this.valueText = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'valueText' field has been set.
      * @return True if the 'valueText' field has been set, false otherwise.
      */
    public boolean hasValueText() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'valueText' field.
      * @return This builder.
      */
    public Builder clearValueText() {
      valueText = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'valueNumber' field.
      * @return The value.
      */
    public Integer getValueNumber() {
      return valueNumber;
    }


    /**
      * Sets the value of the 'valueNumber' field.
      * @param value The value of 'valueNumber'.
      * @return This builder.
      */
    public Builder setValueNumber(Integer value) {
      validate(fields()[5], value);
      this.valueNumber = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'valueNumber' field has been set.
      * @return True if the 'valueNumber' field has been set, false otherwise.
      */
    public boolean hasValueNumber() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'valueNumber' field.
      * @return This builder.
      */
    public Builder clearValueNumber() {
      valueNumber = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Item build() {
      try {
        Item record = new Item();
        record.personId = fieldSetFlags()[0] ? this.personId : (CharSequence) defaultValue(fields()[0]);
        record.itemId = fieldSetFlags()[1] ? this.itemId : (CharSequence) defaultValue(fields()[1]);
        record.itemType = fieldSetFlags()[2] ? this.itemType : (CharSequence) defaultValue(fields()[2]);
        record.itemSubType = fieldSetFlags()[3] ? this.itemSubType : (CharSequence) defaultValue(fields()[3]);
        record.valueText = fieldSetFlags()[4] ? this.valueText : (CharSequence) defaultValue(fields()[4]);
        record.valueNumber = fieldSetFlags()[5] ? this.valueNumber : (Integer) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Item>
    WRITER$ = (org.apache.avro.io.DatumWriter<Item>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Item>
    READER$ = (org.apache.avro.io.DatumReader<Item>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.personId);

    out.writeString(this.itemId);

    out.writeString(this.itemType);

    out.writeString(this.itemSubType);

    if (this.valueText == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.valueText);
    }

    if (this.valueNumber == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeInt(this.valueNumber);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8)this.personId : null);

      this.itemId = in.readString(this.itemId instanceof Utf8 ? (Utf8)this.itemId : null);

      this.itemType = in.readString(this.itemType instanceof Utf8 ? (Utf8)this.itemType : null);

      this.itemSubType = in.readString(this.itemSubType instanceof Utf8 ? (Utf8)this.itemSubType : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.valueText = null;
      } else {
        this.valueText = in.readString(this.valueText instanceof Utf8 ? (Utf8)this.valueText : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.valueNumber = null;
      } else {
        this.valueNumber = in.readInt();
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.personId = in.readString(this.personId instanceof Utf8 ? (Utf8)this.personId : null);
          break;

        case 1:
          this.itemId = in.readString(this.itemId instanceof Utf8 ? (Utf8)this.itemId : null);
          break;

        case 2:
          this.itemType = in.readString(this.itemType instanceof Utf8 ? (Utf8)this.itemType : null);
          break;

        case 3:
          this.itemSubType = in.readString(this.itemSubType instanceof Utf8 ? (Utf8)this.itemSubType : null);
          break;

        case 4:
          if (in.readIndex() != 0) {
            in.readNull();
            this.valueText = null;
          } else {
            this.valueText = in.readString(this.valueText instanceof Utf8 ? (Utf8)this.valueText : null);
          }
          break;

        case 5:
          if (in.readIndex() != 0) {
            in.readNull();
            this.valueNumber = null;
          } else {
            this.valueNumber = in.readInt();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










